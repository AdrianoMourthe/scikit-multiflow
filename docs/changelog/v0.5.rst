.. currentmodule:: skmultiflow
.. include:: _labels.rst

Version 0.5.dev0
----------------

**In development**

- |Feature| Add :class:`drift_detection.HDDM_A`, a drift detection method based
  on the Hoeffding's bounds with moving average-test. Contributor:
  `jiahy <https://github.com/jiahy0825>`_
  (`#161 <https://github.com/scikit-multiflow/scikit-multiflow/pull/161>`_).
- |Feature| Add :class:`drift_detection.HDDM_W`, a drift detection method based
  on the Hoeffding's bounds with moving weighted-average-test. Contributor:
  `jiahy <https://github.com/jiahy0825>`_
  (`#161 <https://github.com/scikit-multiflow/scikit-multiflow/pull/161>`_).
- |Feature| Add :class:`transform.WindowedMinmaxScaler`, a transformer to
  perform feature scaling. Transformation is performed considering samples in a
  sliding window.. Contributor: `jmrozanec <https://github.com/jmrozanec>`_
  (`#184 <https://github.com/scikit-multiflow/scikit-multiflow/pull/184>`_).
- |Feature| Add :class:`transform.WindowedStandardScaler`, a transformer to
  standardize features by removing the mean and scaling to unit variance.
  Transformation is performed considering samples in a sliding window.
  Contributor: `jmrozanec <https://github.com/jmrozanec>`_
  (`#184 <https://github.com/scikit-multiflow/scikit-multiflow/pull/184>`_).
- |Feature| Add :class:`lazy.KNNRegressor`, a nearest-neighbor-based method
  for regression.
- |Efficiency| Refactored classification performance evaluators, implemented
  in Cython for efficiency. Add support for multi-class precision, recall,
  F1-score, and geometric mean.
- |Enhancement| Add ``bootstrap_sampling`` option to the
  :class:`trees.HoeffdingAdaptiveTreeClassifier`.
- |Enhancement| Improvements on data loading methods.
   - Check data consistency
   - Raise error if non-numeric data types are used
   - Raise error if there are missing values
   - Add option to disable missing values error
- |Enhancement| Enable the ``describe_subtree`` method in regression variants
  of the Hoeffding Tree for single-target and multi-target.
- |Enhancement| Add usage example to documentation of multiple methods.
- |FIX| Fix index out of range for the classification functions in the
  ``MIXEDGenerator``. Contributor: `ingako <https://github.com/ingako>`_.
- |FIX| Fix bug in IntraClusterVarianceReduction split criterion.
- |FIX| Fix bug in the ``predict_proba`` method of the
  :class:`meta.AdaptiveRandomForestClassifier` triggered when ``classes``
  are not defined.
- |FIX| Fix ``subtree_depth`` calculation in the
  :class:`trees.HoeffdingTreeClassifier`.
- |FIX| Fix bug in instance sorting in the inner nodes of the
  :class:`trees.HoeffdingAdaptiveTreeClassifier`. Previously, the adaptive
  split nodes were not passing the incoming samples to their descendants.
- |FIX| Add check for zero sum error to avoid division by zero error in
  :class:`bayes.NaiveBayes`. Contributor: `Fiona (fwille)
  <https://github.com/fwille>`_.
- |FIX| Update :class:`meta.LearnPPNSEClassifier`
   - Fix bug that resulted in an error when not all classes are observed by
     any of the ensemble members
   - Add an early stop mechanism when adding members of the ensemble if
     classification error reaches zero, making the normalization step
     ill-defined.
- |API| rename ``weight`` to ``sample_weight`` in
  :class:`meta.OnlineRUSBoostClassifier` and
  :class:`rules.VeryFastDecisionRulesClassifier`. Contributor: `Ben Auffarth
  (benman1) <https://github.com/benman1>`_.
- |API| Deprecate the `prepare_for_use` method in the
  :class:`data.base_stream.Stream` class. Now ``Stream`` objects are ready to
  use after instantiation. A ``prepare_for_use`` stub will be kept 2 minor
  releases for backward compatibility and will be removed in v0.7.0.
- |API| Enforce naming convention for learning methods. Old names will remain
  available for 2 minor releases for backward compatibility and will be
  removed in v0.7.0. Renamed methods are:

   - lazy.KNN -> :class:`lazy.KNNClassifier`
   - lazy.KNNAdwin -> :class:`lazy.KNNADWINClassifier`
   - lazy.SAMKNN -> :class:`lazy.SAMKNNClassifier`
   - meta.AccuracyWeightedEnsemble -> :class:`meta.AccuracyWeightedEnsembleClassifier`
   - meta.AdaptiveRandomForest -> :class:`meta.AdaptiveRandomForestClassifier`
   - meta.AdditiveExpertEnsemble -> :class:`meta.AdditiveExpertEnsembleClassifier`
   - meta.BatchIncremental -> :class:`meta.BatchIncrementalClassifier`
   - meta.DynamicWeightedMajority -> :class:`meta.DynamicWeightedMajorityClassifier`
   - meta.LearnNSE -> :class:`meta.LearnPPNSEClassifier`
   - meta.LearnPP -> :class:`meta.LearnPPClassifier`
   - meta.LeverageBagging -> :class:`meta.LeveragingBaggingClassifier`
   - meta.OnlineAdaC2 -> :class:`meta.OnlineAdaC2Classifier`
   - meta.OnlineBoosting -> :class:`meta.OnlineBoostingClassifier`
   - meta.OnlineCSB2 -> :class:`meta.OnlineCSB2Classifier`
   - meta.OnlineRUSBoost -> :class:`meta.OnlineRUSBoostClassifier`
   - meta.OnlineSMOTEBagging -> :class:`meta.OnlineSMOTEBaggingClassifier`
   - meta.OnlineUnderOverBagging -> :class:`meta.OnlineUnderOverBaggingClassifier`
   - meta.OzaBagging -> :class:`meta.OzaBaggingClassifier`
   - meta.OzaBaggingAdwin -> :class:`meta.OzaBaggingADWINClassifier`
   - rules.VFDR -> :class:`rules.VeryFastDecisionRulesClassifier`
   - trees.HoeffdingTree -> :class:`trees.HoeffdingTreeClassifier`
   - trees.HAT -> :class:`trees.HoeffdingAdaptiveTreeClassifier`
   - trees.HATT -> :class:`trees.ExtremelyFastDecisionTreeClassifier`
   - trees.LCHT -> :class:`trees.LabelCombinationHoeffdingTreeClassifier`
   - trees.RegressionHoeffdingTree -> :class:`trees.HoeffdingTreeRegressor`
   - trees.RegressionHAT -> :class:`trees.HoeffdingAdaptiveTreeRegressor`
   - trees.MultiTargetRegressionHoeffdingTree -> :class:`trees.iSOUPTreeRegressor`

